/*
---
title: Metrics
description: |
    Sagefy uses a larger-than-typical metric system. The rhythm is 24px both vertically and horizontally. The base font size is 16px with a line-height of 24px. Columns are 48px and gutters are 24px. Because of Sagefy's large metrics, a great deal of focus and minimalism is required.

    Different screen sizes alter the number of columns present. While Sagefy is not considered <a href="http://alistapart.com/article/responsive-web-design">responsive web design</a>, it does adjust to available width. Ideas are borrowed from <a href="http://framelessgrid.com/">Frameless Grid</a>, <a href="http://getbootstrap.com/">Twitter Bootstrap</a>, and <a href="http://foundation.zurb.com/">Foundation</a>.
---
*/

$unit = 12px
$gutter = $unit * 2
$column = $gutter * 2
$font-size = 16px
$border-radius = 2px
$max-columns = 20

/*
---
title: Box Sizing
description: |
    Sagefy uses the box sizing mode of border box. See the [Paul Irish article](http://www.paulirish.com/2012/box-sizing-border-box-ftw/).
---
*/
*, *:before, *:after
    box-sizing border-box

/*
---
title: Clearfix
description: |
    The `clearfix` class clears any floats within the element so it doesn't impact neighboring elements.

    TODO: Show example
---
*/
.clearfix
    &:before, &:after
        content " "
        display table

    &:after
        clear both

/*
---
title: Display Type Helpers
description: |
    TODO: Describe, show examples
---
*/
.block
    display block

.inline-block
    display inline-block

.inline
    display inline

/*
---
title: Pull and Push Helpers
description: |
    TODO: Describe, show examples
---
*/
.pull-left
    float left

.pull-right
    float right

.push-left
    margin-left $unit

.push-left-gutter
    margin-left $gutter

.push-right
    margin-right $unit

.push-right-gutter
    margin-right $gutter

/*
---
title: Body Layout
description: The `body` element will use up to 20 columns of width in rendering, but will adapt to the user's available screen real estate.
elements:
    - body
example: |
    <table class="size-table">
        <thead>
            <tr>
                <th>Columns</th>
                <th>Inside</th>
                <th>Outside</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>4</td>
                <td>264px</td>
                <td>312px</td>
            </tr>
            <tr>
                <td>6</td>
                <td>408px</td>
                <td>456px</td>
            </tr>
            <tr>
                <td>8</td>
                <td>552px</td>
                <td>600px</td>
            </tr>
            <tr>
                <td>10</td>
                <td>696px</td>
                <td>744px</td>
            </tr>
            <tr>
                <td>12</td>
                <td>840px</td>
                <td>888px</td>
            </tr>
            <tr>
                <td>14</td>
                <td>984px</td>
                <td>1032px</td>
            </tr>
            <tr>
                <td>16</td>
                <td>1128px</td>
                <td>1176px</td>
            </tr>
            <tr>
                <td>18</td>
                <td>1272px</td>
                <td>1320px</td>
            </tr>
            <tr>
                <td>20</td>
                <td>1416px</td>
                <td>1464px</td>
            </tr>
        </tbody>
    </table>
---
*/

cols(n)
    n * $column + (n - 1) * $gutter

body-cols(n)
    n * $column + (n + 1) * $gutter

$4-columns  = "screen and (min-width: " + (body-cols(4)  + $unit) + ")"
$6-columns  = "screen and (min-width: " + (body-cols(6)  + $unit) + ")"
$8-columns  = "screen and (min-width: " + (body-cols(8)  + $unit) + ")"
$10-columns = "screen and (min-width: " + (body-cols(10) + $unit) + ")"
$12-columns = "screen and (min-width: " + (body-cols(12) + $unit) + ")"
$14-columns = "screen and (min-width: " + (body-cols(14) + $unit) + ")"
$16-columns = "screen and (min-width: " + (body-cols(16) + $unit) + ")"
$18-columns = "screen and (min-width: " + (body-cols(18) + $unit) + ")"
$20-columns = "screen and (min-width: " + (body-cols(20) + $unit) + ")"

html, body
    margin 0 auto

body
    padding 0 $gutter
    overflow-y scroll
    overflow-x hidden

    @media $4-columns
        width body-cols(4)

    @media $6-columns
        width body-cols(6)

    @media $8-columns
        width body-cols(8)

    @media $10-columns
        width body-cols(10)

    @media $12-columns
        width body-cols(12)

    @media $14-columns
        width body-cols(14)

    @media $16-columns
        width body-cols(16)

    @media $18-columns
        width body-cols(18)

    @media $20-columns
        width body-cols(20)

/*
---
title: Layouts
description: Sagefy takes a layout-specified approach rather than a column-specified approach. There are essentially **five types of layouts** present in most web designs. Layouts can be nested within each other.
---
*/

/*
---
title: Columns
description: |
    Any element may be set to a specific number of columns, using the class `col-n`. Any element with set columns larger than the available screen will be reduced to the maximum width.

    TODO: Examples
---
*/
for i in (1..$max-columns)
    .col-{i}
        max-width cols(i)

/*
---
title: Full Width Layout
description: |
    A full-width element assumes the width of its parent. Full-width is native to block level elements, but can be manually set by <code>full-width</code>.

    TODO: Rework for flexbox, examples
---
*/
.full-width
    max-width 100%

/*
---
title: Max Width Layout
description: |
    A max-width element will assume the width of its parent up to a specified number of columns. Max width is set by the class `max-width-n`. Prefer max-widths set in two, four, six...

    TODO: Rework for flexbox, examples
---
*/
.max-width
    margin-left auto
    margin-right auto

for i in (1..$max-columns)
    .max-width-{i}
        @extend .max-width
        max-width cols(i)

/*
---
title: Serial Layout
description: |
    A serial layout consists of a set of even-width elements. Serial layouts specify a maximum number of columns per element.

    Wrap the elements in a <code>div</code> of <code>serial-n</code>, where <var>n</var> is the number of columns from one to ten, not the number of elements.

    TODO: Rework for flexbox, examples
---
*/
.serial
    margin-left -1 * $gutter
    margin-right -1 * $gutter

    > *
        margin-left $gutter
        margin-right $gutter
        display inline-block

for i in (1..($max-columns / 2))
    .serial-{i}
        @extend .serial

        > *
            max-width cols(i)

/*
---
title: Aside Layout
description: |
    An aside, either on the left or right side, of one to eight columns. The main element will take the rest of the parent's width. When the main is less than 60% of the parent, both the main and the aside appear in full width. For a two-in-one aside, use the serial layout inside the aside.

    Wrap both <code>main</code> and <code>aside</code> in a <code>div</code> with the class <code>aside-d-n</code>, where <var>d</var> is either <em>left</em> or <em>right</em>, and <var>n</var> is the number of columns of the aside.

    TODO: Rework for flexbox, examples
---
*/

.reset-aside
    > main
        margin-left 0
        margin-right 0

    > aside
        float none
        max-width auto

for d in left right
    for i in (1..($max-columns / 2 - 2))
        .aside-{d}-{i}
            @extend .clearfix

            > main
                margin-{d} (cols(i) + $gutter)

            > aside
                max-width cols(i)
                float d

            $attr-selector = '[max-width~="' + cols(ceil(i / 0.4)) + '"]'
            *{$attr-selector} &
                @extend .reset-aside

/*
---
title: Double Aside Layout
description: |
    Two asides appear with the main content, one on the left and one on the right. Each aside is one to seven columns. The main element takes the remaining space. If the main element is less than 60% of the parent, all three elements are in full width. The sum of the aside columns must be eight or less.

    Create container <code>aside-left-dl-right-dr</code>, where <var>dl</var> is the number of left columns and <var>dr</var> is the number of right columns. Create an <code>aside</code>, <code>main</code>, and <code>aside</code> elements within the container.

    TODO: Rework for flexbox, examples
---
*/

for l in (1..($max-columns / 2 - 3))
    for r in (1..($max-columns / 2 - 3))
        if l + r <= ($max-columns / 2 - 2)
            .aside-left-{l}-right-{r}
                @extend .clearfix

                > main
                    margin-left (cols(l) + $gutter)
                    margin-right (cols(r) + $gutter)

                > aside:first-child
                    float left
                    max-width cols(l)

                > aside:last-child
                    float right
                    max-width cols(r)

                $attr-selector = '[max-width~="' + cols(ceil((l + r) / 0.4)) + '"]'
                *{$attr-selector} &
                    @extend .reset-aside
